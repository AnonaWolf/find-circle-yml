#!/usr/bin/env ruby
# frozen_string_literal: true

require 'circleci/audit'
require 'octokit'

require 'uri'
require 'json'
require 'pp'

Repository = Struct.new(:name, :main_branch, :url)
ConfigurationFile = Struct.new(:url)

class Bitbucket
  attr_reader :user, :password, :team

  def initialize(user, password, team)
    @user = user
    @password = password
    @team = team
  end

  def repositories
    response = request("/repositories/#{team}")
    parsed_response = JSON.parse(response.body)
    parsed_response.fetch('values', []).map do |value|
      Repository.new(
        value.fetch('full_name'),
        value.dig('mainbranch', 'branch') || 'master',
        value.fetch('links').fetch('html').fetch('href')
      )
    end
  end

  def configuration_file(repository)
    response = request("/repositories/#{repository.name}/src/#{repository.main_branch}/circle.yml?format=meta")
    return unless response.code == '200'
    parsed_response = JSON.parse(response.body)
    commit = parsed_response.fetch('commit', {}).fetch('hash', repository.main_branch)
    path = parsed_response.fetch('path')
    ConfigurationFile.new("#{repository.url}/src/#{commit}/#{path}")
  end

  private

  def request(path)
    uri = URI("https://api.bitbucket.org/2.0#{path}")
    Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
      request = Net::HTTP::Get.new(uri)
      request.basic_auth(user, password)
      http.request request
    end
  end
end

class GitHub
  attr_reader :user, :access_token, :organization

  def initialize(user, access_token, organization)
    @user = user
    @access_token = access_token
    @organization = organization
  end

  def repositories
    client.organization_repositories(organization).map do |response|
      Repository.new(
        response[:full_name],
        response[:default_branch],
        response[:html_url]
      )
    end
  end

  def configuration_file(repository)
    ConfigurationFile.new(
      client.contents(repository.name, path: 'circle.yml')[:html_url]
    )
  rescue Octokit::NotFound
    nil
  end

  private

  def client
    Octokit.auto_paginate = true
    Octokit::Client.new(login: user, password: access_token)
  end
end

class GitHubConfiguration
  ENVIRONMENT_VARIABLES = %w[
    GITHUB_USER
    GITHUB_ACCESS_TOKEN
    GITHUB_ORGANIZATION
  ]

  attr_reader :environment

  def initialize(environment)
    @environment = environment
  end

  def provided?
    ENVIRONMENT_VARIABLES.any? do |environment_variable|
      environment.has_key?(environment_variable)
    end
  end

  def valid?
    missing.empty?
  end

  def error_message
    "Set environment variables: #{missing.join(', ')}"
  end

  def service
    GitHub.new(
      environment.fetch('GITHUB_USER'),
      environment.fetch('GITHUB_ACCESS_TOKEN'),
      environment.fetch('GITHUB_ORGANIZATION')
    )
  end

  private

  def missing
    ENVIRONMENT_VARIABLES.reject do |environment_variable|
      environment.has_key?(environment_variable)
    end
  end
end

class BitbucketConfiguration
  ENVIRONMENT_VARIABLES = %w[
    BITBUCKET_USER
    BITBUCKET_APP_PASSWORD
    BITBUCKET_TEAM
  ]

  attr_reader :environment

  def initialize(environment)
    @environment = environment
  end

  def provided?
    ENVIRONMENT_VARIABLES.any? do |environment_variable|
      environment.has_key?(environment_variable)
    end
  end

  def valid?
    missing.empty?
  end

  def error_message
    "Set environment variables: #{missing.join(', ')}"
  end

  def service
    Bitbucket.new(
      environment.fetch('BITBUCKET_USER'),
      environment.fetch('BITBUCKET_APP_PASSWORD'),
      environment.fetch('BITBUCKET_TEAM')
    )
  end

  private

  def missing
    ENVIRONMENT_VARIABLES.reject do |environment_variable|
      environment.has_key?(environment_variable)
    end
  end
end

provided_configurations = [
  GitHubConfiguration.new(ENV),
  BitbucketConfiguration.new(ENV)
].select(&:provided?)

if provided_configurations.empty?
  STDERR.puts "Provide a Bitbucket or GitHub configuration"
  exit 1
end

provided_configurations.each do |configuration|
  if configuration.valid?
    service = configuration.service
    service.repositories.each do |repository|
      if (configuration_file = service.configuration_file(repository))
        puts configuration_file.url
      end
    end
  else
    STDERR.puts configuration.error_message
    exit 1
  end
end
